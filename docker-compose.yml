services:
  postgres:
    container_name: postgres_db
    image: postgres:17.2-alpine3.21
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME} -h localhost || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dodgygeezers

  mongodb:
    container_name: mongo_db
    image: mongodb/mongodb-community-server:6.0-ubi8
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD-SHELL", "mongosh --username ${MONGO_USERNAME} --password ${MONGO_PASSWORD} --host localhost --eval 'db.adminCommand({ ping: 1 })' || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dodgygeezers

  adminer:
    container_name: adminer_ui
    image: adminer:4.8.1-standalone
    ports:
      - 8080:8080
    networks:
      - dodgygeezers

  redis:
    image: redis:8.0-M02-alpine
    container_name: redis-db
    ports:
      - 6379:6379
    networks:
      - dodgygeezers

  registration-microservice:
    container_name: registration_service # restart: "no"
    ports:
      - 8000:8000
      - 50051:50051
    build:
      context: ./Authentication_Microservice/Authentication
      dockerfile: Dockerfile
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    env_file:
      - .env.production
    depends_on:
      - postgres
    networks:
      - dodgygeezers

  event-microservice:
    container_name: event_service # restart: "no"
    ports:
      - 8001:8001
    build:
      context: ./Event_Microservice/Event
      dockerfile: Dockerfile
    # command: sleep infinity  # Infinite loop to keep container alive doing nothing
    env_file:
      - .env.production
    depends_on:
      - postgres
      - redis
    networks:
      - dodgygeezers

  video-microservice:
    container_name: video_service # restart: "no"
    ports:
      - 8002:8002
    build:
      context: ./Videochat_Microservice/Videochat
      dockerfile: Dockerfile
    env_file:
      - .env.production
    depends_on:
      - mongodb
    networks:
      - dodgygeezers

  celery-worker:
    build:
      context: ./Event_Microservice/Event
      dockerfile: Dockerfile
    container_name: celery-worker
    command:
      - celery
      - -A
      - app.core.celery_config.celery_app
      - worker
      - --loglevel=info
    env_file:
      - .env.production
    networks:
      - dodgygeezers
    depends_on:
      - redis
      - event-microservice

  celery-beat:
    build:
      context: ./Event_Microservice/Event
      dockerfile: Dockerfile
    container_name: celery-beat
    command:
      - celery
      - -A
      - app.core.celery_config.celery_app
      - beat
      - --loglevel=info
    env_file:
      - .env.production
    networks:
      - dodgygeezers
    depends_on:
      - redis
      - event-microservice

  frontend:
    container_name: vite_react_dev
    build:
      context: ./Frontend/gatherly
      dockerfile: Dockerfile
    volumes:
      - type: bind
        source: ./Frontend/gatherly
        target: /usr/src/app/
      - type: volume
        target: /usr/src/app/node_modules 
    ports:
      - 5173:5173
    environment:
      - VITE_AUTH_URL=http://registration-microservice:8000
      - VITE_EVENT_URL=http://event-microservice:8001
      - VITE_VIDEO_URL=http://video-microservice:8002
    depends_on:
      - event-microservice
      - registration-microservice
      - video-microservice
    networks:
      - dodgygeezers
    command: npm run dev

volumes:
  postgres_data:
  mongo_data:

networks:
  dodgygeezers:
    driver: bridge